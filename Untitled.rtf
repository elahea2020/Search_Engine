{\rtf1\ansi\ansicpg1252\cocoartf1345\cocoasubrtf380
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red100\green56\blue32;\red196\green26\blue22;
\red170\green13\blue145;\red92\green38\blue153;\red28\green0\blue207;\red46\green13\blue110;\red38\green71\blue75;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 //\cf0 \
\cf2 //  main.cpp\cf0 \
\cf2 //  project_tst_1\cf0 \
\cf2 //\cf0 \
\cf2 //  Created by Elahe on 12/19/15.\cf0 \
\cf2 //  Copyright (c) 2015 Elahe & Amineh. All rights reserved.\cf0 \
\cf2 //\cf0 \
\
\cf3 #include \cf4 <cstdio>\cf3 \
#include \cf4 <cstdlib>\cf3 \
#include \cf4 <cstring>\cf3 \
#include \cf4 <iostream>\cf3 \
#include \cf4 <string>\cf3 \
#include \cf4 <fstream>\cf3 \
#include \cf4 <sstream>\cf3 \
\cf0 \
\cf5 using\cf0  \cf5 namespace\cf0  \cf6 std\cf0 ;\
\
\cf6 size_t\cf0  search_count(\cf6 string\cf0  search, \cf6 string\cf0  file_string)\
\{\
    \cf6 size_t\cf0  paragraph_counter=\cf7 0\cf0 ;\
    \cf6 size_t\cf0  search_counter=\cf7 0\cf0 ;\
    \cf6 size_t\cf0  pos_search=\cf7 0\cf0 ;\
    \cf6 size_t\cf0  pos_paragraph=\cf7 0\cf0 ;\
    \
    pos_search=file_string.\cf8 find\cf0 (search);\
    \
\cf2 //    search_counter+=(pos_search!=string::npos);\cf0 \
    \
\cf2 //    cout<<"search_counter= "<<search_counter<<endl;\cf0 \
    \
    \cf5 while\cf0  (pos_search!=\cf6 string\cf0 ::\cf6 npos\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf4 "paragraphs= "\cf0 <<paragraph_counter<<\cf8 endl\cf0 ;\
        pos_paragraph=file_string.\cf8 find\cf0 (\cf4 "\\n"\cf0 );\
        \
        \cf5 if\cf0  (pos_paragraph==\cf6 string\cf0 ::\cf6 npos\cf0 )\
        \{\
            pos_paragraph=file_string.\cf8 length\cf0 ();\
        \}\
        \
        \cf5 if\cf0  (pos_search<pos_paragraph)\
        \{\
            \
            \cf5 do\cf0 \
            \{\
                file_string.\cf8 erase\cf0 (file_string.\cf8 begin\cf0 (),file_string.\cf8 begin\cf0 ()+pos_search+search.\cf8 length\cf0 ());\
                pos_paragraph-=pos_search +search.\cf8 length\cf0 ();\
                pos_search=file_string.\cf8 find\cf0 (search);\
                \cf5 if\cf0  (pos_search!=\cf6 string\cf0 ::\cf6 npos\cf0 )\
                \{\
                    search_counter++;\
                    \cf6 cout\cf0 <<\cf4 "found one in paragraph num "\cf0 <<paragraph_counter<<\cf8 endl\cf0 ;\
                \}\
                \
                \
            \}\cf5 while\cf0  (pos_search<pos_paragraph && pos_search!=\cf6 string\cf0 ::\cf6 npos\cf0 );\
            \
        \}\
        \
        \cf5 else\cf0  \cf5 if\cf0 (pos_paragraph!=\cf6 string\cf0 ::\cf6 npos\cf0  && pos_search>pos_paragraph)\
        \{\
            file_string.\cf8 erase\cf0 (file_string.\cf8 begin\cf0 (),file_string.\cf8 begin\cf0 ()+pos_paragraph);\
            paragraph_counter++;\
            pos_search=file_string.\cf8 find\cf0 (search);\
            search_counter+=(pos_search!=\cf6 string\cf0 ::\cf6 npos\cf0 );\
        \}\
        \cf6 cout\cf0 <<\cf4 "search_counter "\cf0 <<search_counter<<\cf8 endl\cf0 ;\
        \
    \}\
    \cf8 printf\cf0 (\cf4 "%zu"\cf0 ,paragraph_counter);\
    \cf5 return\cf0  search_counter;\
    \
\}\
\
\cf5 int\cf0  main()\
\{\
\
    \cf6 ifstream\cf0  fin(\cf4 "1.txt"\cf0 );\
    \cf6 stringstream\cf0  buffer;\
    buffer << fin.\cf8 rdbuf\cf0 ();\
    \cf6 string\cf0  s=buffer.\cf8 str\cf0 ();\
    \cf6 cout\cf0 <<s;\
    \
\
    \cf6 cout\cf0 <<\cf9 search_count\cf0 (\cf4 "I"\cf0 , s);\
    fin.\cf8 close\cf0 ();\
\cf2 //    cout<<s1.find("l");\cf0 \
    \cf5 return\cf0  \cf7 0\cf0 ;\
\}\
\
\
\
\
\
\
\
\
\cf2 //\cf0 \
\cf2 //  main.cpp\cf0 \
\cf2 //  project_tst_1\cf0 \
\cf2 //\cf0 \
\cf2 //  Created by Elahe on 12/19/15.\cf0 \
\cf2 //  Copyright (c) 2015 Elahe & Amineh. All rights reserved.\cf0 \
\cf2 //\cf0 \
\
\cf3 #include \cf4 <cstdio>\cf3 \
#include \cf4 <cstdlib>\cf3 \
#include \cf4 <cstring>\cf3 \
#include \cf4 <iostream>\cf3 \
#include \cf4 <string>\cf3 \
#include \cf4 <fstream>\cf3 \
#include \cf4 <sstream>\cf3 \
\cf0 \
\cf5 using\cf0  \cf5 namespace\cf0  \cf6 std\cf0 ;\
\
\cf6 size_t\cf0  search_count(\cf6 string\cf0  search, \cf6 string\cf0  file_string)\
\{\
    \cf2 //search.insert(0," ");\cf0 \
\cf2 //    search.insert(search.length()," ");\cf0 \
\cf2 //    cout<<"."<<search<<"."<<endl;\cf0 \
    \cf6 size_t\cf0  paragraph_counter=\cf7 0\cf0 ;\
    \cf6 size_t\cf0  search_counter=\cf7 0\cf0 ;\
    \cf6 size_t\cf0  pos_search=\cf7 0\cf0 ;\
    \cf6 size_t\cf0  pos_paragraph=\cf7 0\cf0 ;\
    \
    pos_search=file_string.\cf8 find\cf0 (search);\
    \
    search_counter+=(pos_search!=\cf6 string\cf0 ::\cf6 npos\cf0 );\
    \
\cf2 //    cout<<"search_counter= "<<search_counter<<endl;\cf0 \
    \
    \cf5 while\cf0  (pos_search!=\cf6 string\cf0 ::\cf6 npos\cf0 )\
    \{\
        \cf2 //cout<<"paragraphs= "<<paragraph_counter<<endl;\cf0 \
        pos_paragraph=file_string.\cf8 find\cf0 (\cf4 "\\n"\cf0 );\
\
        paragraph_counter+=(pos_paragraph!=\cf6 string\cf0 ::\cf6 npos\cf0 );\
        \
        \cf5 if\cf0  (pos_paragraph==\cf6 string\cf0 ::\cf6 npos\cf0 )\
        \{\
            pos_paragraph=file_string.\cf8 length\cf0 ();\
        \}\
        \
        \cf5 if\cf0  (pos_search<pos_paragraph)\
        \{\
\cf2 //            paragraph_counter++;\cf0 \
            \
            \cf5 do\cf0 \
            \{\
                \cf6 cout\cf0 <<\cf4 "found one in paragraph num"\cf0 <<paragraph_counter<<\cf8 endl\cf0 ;\
                file_string.\cf8 erase\cf0 (file_string.\cf8 begin\cf0 (),file_string.\cf8 begin\cf0 ()+pos_search+search.\cf8 length\cf0 ());\
\cf2 //                cout<<file_string<<endl;\cf0 \
                pos_paragraph-=pos_search +search.\cf8 length\cf0 ();\
                pos_search=file_string.\cf8 find\cf0 (search);\
                \cf5 if\cf0  (pos_search!=\cf6 string\cf0 ::\cf6 npos\cf0 )\
                \{\
                    search_counter++;\
\cf2 //                    cout<<"found one in paragraph num"<<paragraph_counter<<endl;\cf0 \
                \}\
                \
                \
            \}\cf5 while\cf0  (pos_search<pos_paragraph && pos_search!=\cf6 string\cf0 ::\cf6 npos\cf0 );\
            \
        \}\
        \
        \cf5 else\cf0  \cf5 if\cf0 (pos_paragraph!=\cf6 string\cf0 ::\cf6 npos\cf0 )\
        \{\
            file_string.\cf8 erase\cf0 (file_string.\cf8 begin\cf0 (),file_string.\cf8 begin\cf0 ()+pos_paragraph+search.\cf8 length\cf0 ());\
\cf2 //            cout<<file_string<<endl;\cf0 \
            \cf2 //paragraph_counter++;\cf0 \
            pos_search=file_string.\cf8 find\cf0 (search);\
            \cf2 //search_counter+=(pos_search!=string::npos);\cf0 \
        \}\
        \cf2 //cout<<"search_counter "<<search_counter<<endl;\cf0 \
        \
    \}\
    \cf8 printf\cf0 (\cf4 "paragraph= %zu\\n"\cf0 ,paragraph_counter);\
    \cf5 return\cf0  search_counter;\
    \
\}\
\
\cf5 int\cf0  main()\
\{\
\
    \cf6 ifstream\cf0  fin(\cf4 "1'.txt"\cf0 );\
    \cf6 stringstream\cf0  buffer;\
    buffer << fin.\cf8 rdbuf\cf0 ();\
    \cf6 string\cf0  s=buffer.\cf8 str\cf0 ();\
    \cf6 cout\cf0 <<s;\
    \
\
    \cf6 cout\cf0 <<\cf8 endl\cf0 <<\cf9 search_count\cf0 (\cf4 "I"\cf0 , s);\
    fin.\cf8 close\cf0 ();\
\cf2 //    cout<<s1.find("l");\cf0 \
    \cf5 return\cf0  \cf7 0\cf0 ;\
\}\
\
}